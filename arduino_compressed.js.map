{"version":3,"sources":["generators/arduino.js","generators/arduino/leaphy_common.js","generators/arduino/leaphy_original.js","generators/arduino/leaphy_click.js","generators/arduino/leaphy_flitz.js","generators/arduino/leaphy_extra.js","generators/arduino/arduino.js","generators/arduino/math.js","generators/arduino/loops.js","generators/arduino/logic.js","generators/arduino/variables.js","generators/arduino/procedures.js","generators/arduino/text.js","generators/arduino/all.js"],"names":["Variables","Generator","Names","NameType","ConnectionType","Msg","Arduino","addReservedWords","ORDER_ATOMIC","ORDER_UNARY_POSTFIX","ORDER_UNARY_PREFIX","ORDER_MULTIPLICATIVE","ORDER_ADDITIVE","ORDER_SHIFT","ORDER_RELATIONAL","ORDER_EQUALITY","ORDER_BITWISE_AND","ORDER_BITWISE_XOR","ORDER_BITWISE_OR","ORDER_LOGICAL_AND","ORDER_LOGICAL_OR","ORDER_CONDITIONAL","ORDER_ASSIGNMENT","ORDER_COMMA","ORDER_UNARY_NEGATION","ORDER_MEMBER","ORDER_NONE","PinTypes","INPUT","OUTPUT","PWM","SERVO","STEPPER","SERIAL","I2C","SPI","ORDER_OVERRIDES","ORDER_FUNCTION_CALL","ORDER_LOGICAL_NOT","ORDER_MULTIPLICATION","ORDER_ADDITION","DEF_FUNC_NAME","FUNCTION_NAME_PLACEHOLDER_","init","Arduino.init","workspace","Object","getPrototypeOf","call","nameDB_","reset","RESERVED_WORDS_","setVariableMap","getVariableMap","populateVariables","populateProcedures","defvars","devVarList","allDeveloperVariables","i","length","push","getName","DEVELOPER_VARIABLE","variables","allUsedVarModels","getId","VARIABLE","definitions_","join","includes_","create","setups_","pins_","isInitialized","finish","Arduino.finish","code","includes","definitions","name","setups","userSetupCode","undefined","codeFunctions_","userFunctions_","functionNames_","allDefs","setup","loop","replace","addInclude","Arduino.addInclude","includeTag","addDeclaration","Arduino.addDeclaration","declarationTag","addVariable","Arduino.addVariable","varName","overwrite","overwritten","variables_","addSetup","Arduino.addSetup","setupTag","addFunction","Arduino.addFunction","preferedName","uniqueName","getDistinctName","PROCEDURE","reservePin","Arduino.reservePin","block","pin","pinType","warningTag","setWarningText","ARD_PIN_WARN1","scrubNakedValue","Arduino.scrubNakedValue","line","quote_","Arduino.quote_","string","scrub_","Arduino.scrub_","commentCode","outputConnection","targetConnection","comment","getCommentText","prefixLines","x","inputList","type","INPUT_VALUE","childBlock","connection","targetBlock","allNestedComments","nextBlock","nextConnection","nextCode","blockToCode","noGeneratorCodeInline","Arduino.noGeneratorCodeInline","noGeneratorCodeLine","Arduino.noGeneratorCodeLine","branch","statementToCode","STATEMENT_PREFIX","id","INDENT","INFINITE_LOOP_TRAP","valueToCode","value","red","green","blue","dropdown_Type","getFieldValue","speed","dropdown_pin","frequency","duration","pin1","state1Output","pin2","state2Output","pin3","state3Output","sensorType","flitz_red","flitz_green","flitz_blue","includeDefinition","variablesDefinition","getColorDefinition","rgbColorSetupCode","colorType","leds","led","dropdownType","pinKey","servoAngle","servoName","stateOutput","trigPin","echoPin","displayInclude","displayDefinition","displaySetup","displaySerialSetup","addDisplaySetupCode","row","sensor","axis","parseFloat","Infinity","tuple","OPERATORS","ADD","MINUS","MULTIPLY","DIVIDE","POWER","operator","order","argument0","argument1","arg","substring","CONSTANTS","number_to_check","dropdown_property","funcName","func","divisor","argument2","functionName","math_random_int","random_function","stringUtils","repeats","Number","addLoopTrap","loopVar","endVar","match","isNumber","until","variable0","increment","up","step","Math","abs","startVar","incVar","n","argument","elseifCount_","elseCount_","defaultArgument","valueIf","valueThen","valueElse","returnValue","args","arguments_","getArduinoType_","returnType","hasReturnValue_","setupBranch","getInputTargetBlock","goog","isString","exports","moduleExports"],"mappings":"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","file":"arduino_compressed.js","sourcesContent":["/**\n * @license\n * Copyright 2014 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Helper functions for generating Arduino for blocks.\n * @author gasolin@gmail.com (Fred Lin)\n * reboot scanet@libreduc.cc (SebCanet)\n */\n'use strict';\n\ngoog.module('Blockly.Arduino');\n\nconst Variables = goog.require('Blockly.Variables');\nconst { Generator } = goog.require('Blockly.Generator');\nconst { Names, NameType } = goog.require('Blockly.Names');\nconst { ConnectionType } = goog.require('Blockly.ConnectionType');\nconst {Msg} = goog.require('Blockly.Msg');\n\n/**\n * Arduino code generator.\n * @type {!Generator}\n */\nconst Arduino = new Generator('Arduino');\n\n/**\n * List of illegal variable names.\n * This is not intended to be a security feature.  Blockly is 100% client-side,\n * so bypassing this list is trivial.  This is intended to prevent users from\n * accidentally clobbering a built-in object or function.\n * Arduino specific keywords defined in: http://arduino.cc/en/Reference/HomePage\n * @private\n */\nArduino.addReservedWords(\n  'Blockly,' +  // In case JS is evaled in the current window.\n  'setup,loop,if,else,for,switch,case,while,do,break,continue,return,goto,' +\n  'define,include,HIGH,LOW,INPUT,OUTPUT,INPUT_PULLUP,true,false,integer,' +\n  'constants,floating,point,void,boolean,char,unsigned,byte,int,word,long,' +\n  'float,double,string,String,array,static,volatile,const,sizeof,pinMode,' +\n  'digitalWrite,digitalRead,analogReference,analogRead,analogWrite,tone,' +\n  'noTone,shiftOut,shitIn,pulseIn,millis,micros,delay,delayMicroseconds,' +\n  'min,max,abs,constrain,map,pow,sqrt,sin,cos,tan,randomSeed,random,' +\n  'lowByte,highByte,bitRead,bitWrite,bitSet,bitClear,bit,attachInterrupt,' +\n  'detachInterrupt,interrupts,noInterrupts');\n\n/** Order of operation ENUMs. */\nArduino.ORDER_ATOMIC = 0;         // 0 \"\" ...\nArduino.ORDER_UNARY_POSTFIX = 1;  // expr++ expr-- () [] .\nArduino.ORDER_UNARY_PREFIX = 2;   // -expr !expr ~expr ++expr --expr\nArduino.ORDER_MULTIPLICATIVE = 3; // * / % ~/\nArduino.ORDER_ADDITIVE = 4;       // + -\nArduino.ORDER_SHIFT = 5;          // << >>\nArduino.ORDER_RELATIONAL = 6;     // is is! >= > <= <\nArduino.ORDER_EQUALITY = 7;       // == != === !==\nArduino.ORDER_BITWISE_AND = 8;    // &\nArduino.ORDER_BITWISE_XOR = 9;    // ^\nArduino.ORDER_BITWISE_OR = 10;    // |\nArduino.ORDER_LOGICAL_AND = 11;   // &&\nArduino.ORDER_LOGICAL_OR = 12;    // ||\nArduino.ORDER_CONDITIONAL = 13;   // expr ? expr : expr\nArduino.ORDER_ASSIGNMENT = 14;    // = *= /= ~/= %= += -= <<= >>= &= ^= |=\nArduino.ORDER_COMMA = 15;    // ,\nArduino.ORDER_UNARY_NEGATION = 16;\nArduino.ORDER_MEMBER = 17;\nArduino.ORDER_NONE = 99;          // (...)\n\n/**\n * A list of types tasks that the pins can be assigned. Used to track usage and\n * warn if the same pin has been assigned to more than one task.\n */\nArduino.PinTypes = {\n  INPUT: 'INPUT',\n  OUTPUT: 'OUTPUT',\n  PWM: 'PWM',\n  SERVO: 'SERVO',\n  STEPPER: 'STEPPER',\n  SERIAL: 'SERIAL',\n  I2C: 'I2C/TWI',\n  SPI: 'SPI'\n};\nArduino.ORDER_OVERRIDES = [\n  // (foo()).bar -> foo().bar\n  // (foo())[0] -> foo()[0]\n  [Arduino.ORDER_FUNCTION_CALL, Arduino.ORDER_MEMBER],\n  // (foo())() -> foo()()\n  [Arduino.ORDER_FUNCTION_CALL, Arduino.ORDER_FUNCTION_CALL],\n  // (foo.bar).baz -> foo.bar.baz\n  // (foo.bar)[0] -> foo.bar[0]\n  // (foo[0]).bar -> foo[0].bar\n  // (foo[0])[1] -> foo[0][1]\n  [Arduino.ORDER_MEMBER, Arduino.ORDER_MEMBER],\n  // (foo.bar)() -> foo.bar()\n  // (foo[0])() -> foo[0]()\n  [Arduino.ORDER_MEMBER, Arduino.ORDER_FUNCTION_CALL],\n  // !(!foo) -> !!foo\n  [Arduino.ORDER_LOGICAL_NOT, Arduino.ORDER_LOGICAL_NOT],\n  // a * (b * c) -> a * b * c\n  [Arduino.ORDER_MULTIPLICATION, Arduino.ORDER_MULTIPLICATION],\n  // a + (b + c) -> a + b + c\n  [Arduino.ORDER_ADDITION, Arduino.ORDER_ADDITION],\n  // a && (b && c) -> a && b && c\n  [Arduino.ORDER_LOGICAL_AND, Arduino.ORDER_LOGICAL_AND],\n  // a || (b || c) -> a || b || c\n  [Arduino.ORDER_LOGICAL_OR, Arduino.ORDER_LOGICAL_OR]\n];\n\n/**\n * Arduino generator short name for\n * Blockly.Generator.prototype.FUNCTION_NAME_PLACEHOLDER_\n * @type {!string}\n */\nArduino.DEF_FUNC_NAME = Arduino.FUNCTION_NAME_PLACEHOLDER_;\n\n/**\n * Initialises the database of global definitions, the setup function, function\n * names, and variable names.\n * @param {Workspace} workspace Workspace to generate code from.\n */\nArduino.init = function (workspace) {\n\n  // Call Blockly.Generator's init.\n  Object.getPrototypeOf(this).init.call(this);\n\n  if (!this.nameDB_) {\n    this.nameDB_ = new Names(this.RESERVED_WORDS_);\n  } else {\n    this.nameDB_.reset();\n  }\n\n  Arduino.nameDB_.setVariableMap(workspace.getVariableMap());\n  this.nameDB_.populateVariables(workspace);\n  this.nameDB_.populateProcedures(workspace);\n\n  const defvars = [];\n  // Add developer variables (not created or named by the user).\n  const devVarList = Variables.allDeveloperVariables(workspace);\n  for (let i = 0; i < devVarList.length; i++) {\n    defvars.push(this.nameDB_.getName(devVarList[i],\n      NameType.DEVELOPER_VARIABLE));\n  }\n\n  // Add user variables, but only ones that are being used.\n  const variables = Variables.allUsedVarModels(workspace);\n  for (let i = 0; i < variables.length; i++) {\n    defvars.push(this.nameDB_.getName(variables[i].getId(),\n      NameType.VARIABLE));\n  }\n\n  // Declare all of the variables.\n  if (defvars.length) {\n    this.definitions_['variables'] =\n      'double ' + defvars.join(' = 0, ') + ' = 0;\\n';\n  }\n\n  // Create a dictionary of definitions to be printed at the top of the sketch\n  this.includes_ = Object.create(null);\n  // Create a dictionary of setups to be printed in the setup() function\n  this.setups_ = Object.create(null);\n  // Create a dictionary of pins to check if their use conflicts\n  this.pins_ = Object.create(null);\n\n  this.isInitialized = true;\n};\n\n/**\n * Prepare all generated code to be placed in the sketch specific locations.\n * @param {string} code Generated main program (loop function) code.\n * @return {string} Completed sketch code.\n */\nArduino.finish = function (code) {\n  // Convert the includes, definitions, and functions dictionaries into lists\n  var includes = [], definitions = [], variables = [], functions = [];\n  for (var name in Arduino.includes_) {\n    includes.push(Arduino.includes_[name]);\n  }\n  if (includes.length) {\n    includes.push('\\n');\n  }\n  for (var name in this.definitions_) {\n    definitions.push(Arduino.definitions_[name]);\n  }\n  if (definitions.length) {\n    definitions.push('\\n');\n  }\n  \n  // userSetupCode added at the end of the setup function without leading spaces\n  var setups = [''], userSetupCode = '';\n  if (Arduino.setups_['userSetupCode'] !== undefined) {\n    userSetupCode = '\\n  ' + Arduino.setups_['userSetupCode'];\n    delete Arduino.setups_['userSetupCode'];\n  }\n  for (var name in Arduino.setups_) {\n    setups.push(Arduino.setups_[name]);\n  }\n  if (userSetupCode) {\n    setups.push(userSetupCode);\n  }\n\n  // Clean up temporary data\n  delete Arduino.includes_;\n  delete Arduino.definitions_;\n  delete Arduino.codeFunctions_;\n  delete Arduino.userFunctions_;\n  delete Arduino.functionNames_;\n  delete Arduino.setups_;\n  delete Arduino.pins_;\n  this.nameDB_.reset();\n\n  var allDefs = includes.join('\\n') + definitions.join('\\n') + variables.join('\\n') + functions.join('\\n\\n');\n  var setup = 'void setup() {' + setups.join('\\n  ') + '\\n}\\n\\n';\n  var loop = 'void loop() {\\n  ' + code.replace(/\\n/g, '\\n  ') + '\\n}';\n  return allDefs + setup + loop;\n};\n\n/**\n * Adds a string of \"include\" code to be added to the sketch.\n * Once a include is added it will not get overwritten with new code.\n * @param {!string} includeTag Identifier for this include code.\n * @param {!string} code Code to be included at the very top of the sketch.\n */\nArduino.addInclude = function (includeTag, code) {\n  if (Arduino.includes_[includeTag] === undefined) {\n    Arduino.includes_[includeTag] = code;\n  }\n};\n\n/**\n * Adds a string of code to be declared globally to the sketch.\n * Once it is added it will not get overwritten with new code.\n * @param {!string} declarationTag Identifier for this declaration code.\n * @param {!string} code Code to be added below the includes.\n */\nArduino.addDeclaration = function (declarationTag, code) {\n  if (Arduino.definitions_[declarationTag] === undefined) {\n    Arduino.definitions_[declarationTag] = code;\n  }\n};\n\n/**\n * Adds a string of code to declare a variable globally to the sketch.\n * Only if overwrite option is set to true it will overwrite whatever\n * value the identifier held before.\n * @param {!string} varName The name of the variable to declare.\n * @param {!string} code Code to be added for the declaration.\n * @param {boolean=} overwrite Flag to ignore previously set value.\n * @return {!boolean} Indicates if the declaration overwrote a previous one.\n */\n Arduino.addVariable = function (varName, code, overwrite) {\n  var overwritten = false;\n  if (overwrite || (Arduino.variables_[varName] === undefined)) {\n    Arduino.variables_[varName] = code;\n    overwritten = true;\n  }\n  return overwritten;\n};\n\n/**\n * Adds a string of code into the Arduino setup() function. It takes an\n * identifier to not repeat the same kind of initialisation code from several\n * blocks. If overwrite option is set to true it will overwrite whatever\n * value the identifier held before.\n * @param {!string} setupTag Identifier for the type of set up code.\n * @param {!string} code Code to be included in the setup() function.\n * @param {boolean=} overwrite Flag to ignore previously set value.\n * @return {!boolean} Indicates if the new setup code overwrote a previous one.\n */\nArduino.addSetup = function (setupTag, code, overwrite) {\n  var overwritten = false;\n  if (overwrite || (Arduino.setups_[setupTag] === undefined)) {\n    Arduino.setups_[setupTag] = code;\n    overwritten = true;\n  }\n  return overwritten;\n};\n\n/**\n * Adds a string of code as a function. It takes an identifier (meant to be the\n * function name) to only keep a single copy even if multiple blocks might\n * request this function to be created.\n * A function (and its code) will only be added on first request.\n * @param {!string} preferedName Identifier for the function.\n * @param {!string} code Code to be included in the setup() function.\n * @return {!string} A unique function name based on input name.\n */\nArduino.addFunction = function (preferedName, code) {\n  if (Arduino.codeFunctions_[preferedName] === undefined) {\n    var uniqueName = this.nameDB_.getDistinctName(\n      preferedName, NameType.PROCEDURE);\n    Arduino.codeFunctions_[preferedName] =\n      code.replace(Arduino.DEF_FUNC_NAME, uniqueName);\n    Arduino.functionNames_[preferedName] = uniqueName;\n  }\n  return Arduino.functionNames_[preferedName];\n};\n\n/**\n * Description.\n * @param {!Block} block Description.\n * @param {!string} pin Description.\n * @param {!string} pinType Description.\n * @param {!string} warningTag Description.\n */\nArduino.reservePin = function (block, pin, pinType, warningTag) {\n  if (Arduino.pins_[pin] !== undefined) {\n    if (Arduino.pins_[pin] != pinType) {\n      block.setWarningText(Msg.ARD_PIN_WARN1.replace('%1', pin)\n        .replace('%2', warningTag).replace('%3', pinType)\n        .replace('%4', Arduino.pins_[pin]), warningTag);\n    } else {\n      block.setWarningText(null, warningTag);\n    }\n  } else {\n    Arduino.pins_[pin] = pinType;\n    block.setWarningText(null, warningTag);\n  }\n};\n\n/**\n * Naked values are top-level blocks with outputs that aren't plugged into\n * anything. A trailing semicolon is needed to make this legal.\n * @param {string} line Line of generated code.\n * @return {string} Legal line of code.\n */\nArduino.scrubNakedValue = function (line) {\n  return line + ';\\n';\n};\n\n/**\n * Encode a string as a properly escaped Arduino string, complete with quotes.\n * @param {string} string Text to encode.\n * @return {string} Arduino string.\n * @private\n */\nArduino.quote_ = function (string) {\n  // TODO: This is a quick hack.  Replace with goog.string.quote\n  string = string.replace(/\\\\/g, '\\\\\\\\')\n    .replace(/\\n/g, '\\\\\\n')\n    .replace(/\\$/g, '\\\\$')\n    .replace(/'/g, '\\\\\\'');\n  return '\\\"' + string + '\\\"';\n};\n\n/**\n * Common tasks for generating Arduino from blocks.\n * Handles comments for the specified block and any connected value blocks.\n * Calls any statements following this block.\n * @param {!Block} block The current block.\n * @param {string} code The Arduino code created for this block.\n * @return {string} Arduino code with comments and subsequent blocks added.\n * @this {!Generator}\n * @private\n */\nArduino.scrub_ = function (block, code) {\n  if (code === null) {\n    // Block has handled code generation itself.\n    return '';\n  }\n  var commentCode = '';\n  // Only collect comments for blocks that aren't inline.\n  if (!block.outputConnection || !block.outputConnection.targetConnection) {\n    // Collect comment for this block.\n    var comment = block.getCommentText();\n    if (comment) {\n      commentCode += this.prefixLines(comment, '// ') + '\\n';\n    }\n    // Collect comments for all value arguments.\n    // Don't collect comments for nested statements.\n    for (var x = 0; x < block.inputList.length; x++) {\n      if (block.inputList[x].type == ConnectionType.INPUT_VALUE) {\n        var childBlock = block.inputList[x].connection.targetBlock();\n        if (childBlock) {\n          var comment = this.allNestedComments(childBlock);\n          if (comment) {\n            commentCode += this.prefixLines(comment, '// ');\n          }\n        }\n      }\n    }\n  }\n  var nextBlock = block.nextConnection && block.nextConnection.targetBlock();\n  var nextCode = this.blockToCode(nextBlock);\n  return commentCode + code + nextCode;\n};\n\n/** Used for not-yet-implemented block code generators */\nArduino.noGeneratorCodeInline = function () {\n  return ['', Arduino.ORDER_ATOMIC];\n};\n\nArduino.noGeneratorCodeLine = function () {\n  return '';\n};\n\nexports.arduinoGenerator = Arduino;\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Arduino for Leaphy Common blocks.\n */\n'use strict';\n\ngoog.module('Blockly.Arduino.leaphyCommon');\n\nconst { arduinoGenerator: Arduino } = goog.require('Blockly.Arduino');\n\nArduino['leaphy_start'] = function (block) {\n    // Define the Start procedure\n    var funcName = 'leaphyProgram';\n    var branch = Arduino.statementToCode(block, 'STACK');\n    if (Arduino.STATEMENT_PREFIX) {\n        var id = block.id.replace(/\\$/g, '$$$$');  // Issue 251.\n        branch = Arduino.prefixLines(\n            Arduino.STATEMENT_PREFIX.replace(/%1/g,\n                '\\'' + id + '\\''), Arduino.INDENT) + branch;\n    }\n    if (Arduino.INFINITE_LOOP_TRAP) {\n        branch = Arduino.INFINITE_LOOP_TRAP.replace(/%1/g,\n            '\\'' + block.id + '\\'') + branch;\n    }\n    var returnType = 'void';\n    var code = returnType + ' ' + funcName + '() {\\n' + branch + '}';\n\n    code = Arduino.scrub_(block, code);\n    Arduino.definitions_[funcName] = code;\n    Arduino.addSetup('userSetupCode', funcName + '();', false);\n    return null;\n};\n\nArduino['leaphy_serial_print_line'] = function (block) {\n    Arduino.addSetup('serial', 'Serial.begin(115200);', false);\n    var value = Arduino.valueToCode(this, 'VALUE', Arduino.ORDER_ATOMIC) || '0';\n    var code = 'Serial.println(' + value + ');\\n';\n    return code;\n};\n\nArduino['leaphy_serial_print_value'] = function (block) {\n    Arduino.addSetup('serial', 'Serial.begin(115200);', false);\n    var name = Arduino.valueToCode(this, 'NAME', Arduino.ORDER_ATOMIC) || '0';\n    var value = Arduino.valueToCode(this, 'VALUE', Arduino.ORDER_ATOMIC) || '0';\n    var code = 'Serial.print(' + name + ');\\nSerial.print(\" = \");\\nSerial.println(' + value + ');\\n';\n    return code;\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Arduino for Leaphy Original blocks.\n */\n 'use strict';\n\ngoog.module('Blockly.Arduino.leaphyOriginal');\n \nconst { arduinoGenerator: Arduino } = goog.require('Blockly.Arduino');\n \n \nArduino['leaphy_original_set_led'] = function (block) {\n    var red = Arduino.valueToCode(this, 'LED_RED', Arduino.ORDER_ATOMIC) || '0'\n    var green = Arduino.valueToCode(this, 'LED_GREEN', Arduino.ORDER_ATOMIC) || '0'\n    var blue = Arduino.valueToCode(this, 'LED_BLUE', Arduino.ORDER_ATOMIC) || '0'\n    Arduino.definitions_['define_leaphy_original'] = '#include \"Leaphyoriginal1.h\"\\n';\n    var code = 'setLed(' + red + ', ' + green + ', ' + blue + ');\\n';\n    return code;\n};\n\nArduino['leaphy_original_set_motor'] = function (block) {\n    var dropdown_Type = block.getFieldValue('MOTOR_TYPE');\n    var speed = Arduino.valueToCode(this, 'MOTOR_SPEED', Arduino.ORDER_ATOMIC) || '100'\n    Arduino.definitions_['define_leaphy_original'] = '#include \"Leaphyoriginal1.h\"\\n';\n    var code = 'setMotor(' + dropdown_Type + ', ' + speed + ');\\n';\n    return code;\n};\n\nArduino['leaphy_click_set_motor'] = Arduino['leaphy_original_set_motor'];\n\nArduino['leaphy_original_get_distance'] = function (block) {\n    Arduino.definitions_['define_leaphy_original'] = '#include \"Leaphyoriginal1.h\"\\n';\n    var code = 'getDistance()';\n    return [code, Arduino.ORDER_ATOMIC];\n};\n\nArduino['leaphy_original_move_motors'] = function (block) {\n    var dropdown_Type = block.getFieldValue('MOTOR_DIRECTION');\n    var speed = Arduino.valueToCode(this, 'MOTOR_SPEED', Arduino.ORDER_ATOMIC) || '100'\n    Arduino.definitions_['define_leaphy_original'] = '#include \"Leaphyoriginal1.h\"\\n';\n    var code = 'moveMotors(' + dropdown_Type + ', ' + speed + ');\\n';\n    return code;\n}\n\nArduino['leaphy_original_digital_read'] = function (block) {\n    var dropdown_pin = block.getFieldValue('PIN');\n    Arduino.setups_['setup_input_' + dropdown_pin] = 'pinMode(' + dropdown_pin + ', INPUT);';\n    var code = 'digitalRead(' + dropdown_pin + ')';\n    return [code, Arduino.ORDER_ATOMIC];\n};\n\nArduino['leaphy_original_analog_read'] = function (block) {\n    var dropdown_pin = block.getFieldValue('PIN');\n    //Arduino.setups_['setup_input_'+dropdown_pin] = 'pinMode('+dropdown_pin+', INPUT);';\n    var code = 'analogRead(' + dropdown_pin + ')';\n    return [code, Arduino.ORDER_ATOMIC];\n};\n\nArduino['leaphy_original_buzz'] = function(block) {\n    Arduino.addInclude('arduino', '#include <Arduino.h>');\n    Arduino.addSetup('tone', 'pinMode(4, OUTPUT);', false);\n    var frequency = Arduino.valueToCode(this, 'FREQUENCY', Arduino.ORDER_ATOMIC) || '0';\n    var duration = Arduino.valueToCode(this, 'DURATION', Arduino.ORDER_ATOMIC) || '0';\n    var code = 'tone(4, ' + frequency + ', ' + duration + ');\\n';\n    return code;\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Arduino for Leaphy Click blocks.\n */\n 'use strict';\n\ngoog.module('Blockly.Arduino.leaphyClick');\n \nconst { arduinoGenerator: Arduino } = goog.require('Blockly.Arduino');\n\nArduino['leaphy_click_rgb_digitalwrite'] = function (block) {\n    var pin1 = block.getFieldValue('PIN1');\n    var state1Output = Arduino.valueToCode(\n        block, 'STATE1', Arduino.ORDER_ATOMIC) || 'LOW';\n    if (state1Output == 'true'){\n        state1Output = 'HIGH';\n    } else {\n        state1Output = 'LOW';\n    }\n\n    Arduino.reservePin(\n        block, pin1, Arduino.PinTypes.OUTPUT, 'Digital Write');\n\n    var pin1SetupCode = 'pinMode(' + pin1 + ', OUTPUT);';\n    Arduino.addSetup('io_' + pin1, pin1SetupCode, false);\n\n    var pin2 = block.getFieldValue('PIN2');\n    var state2Output = Arduino.valueToCode(\n        block, 'STATE2', Arduino.ORDER_ATOMIC) || 'LOW';\n    \n    if (state2Output == 'true'){\n        state2Output = 'HIGH';\n    } else {\n        state2Output = 'LOW';\n    }\n    Arduino.reservePin(\n        block, pin2, Arduino.PinTypes.OUTPUT, 'Digital Write');\n\n    var pin2SetupCode = 'pinMode(' + pin2 + ', OUTPUT);';\n    Arduino.addSetup('io_' + pin2, pin2SetupCode, false);\n\n    var pin3 = block.getFieldValue('PIN3');\n    var state3Output = Arduino.valueToCode(\n        block, 'STATE3', Arduino.ORDER_ATOMIC) || 'LOW';\n\n    if (state3Output == 'true'){\n        state3Output = 'HIGH';\n    } else {\n        state3Output = 'LOW';\n    }\n    Arduino.reservePin(\n        block, pin3, Arduino.PinTypes.OUTPUT, 'Digital Write');\n\n    var pin3SetupCode = 'pinMode(' + pin3 + ', OUTPUT);';\n    Arduino.addSetup('io_' + pin3, pin3SetupCode, false);\n\n    var code = 'digitalWrite(' + pin1 + ', ' + state1Output + ');\\n'\n                     + 'digitalWrite(' + pin2 + ', ' + state2Output + ');\\n'\n                     + 'digitalWrite(' + pin3 + ', ' + state3Output + ');\\n';\n                     \n    return code;\n};\n\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Arduino for Leaphy Flitz blocks.\n */\n 'use strict';\n\ngoog.module('Blockly.Arduino.leaphyFlitz');\n \nconst { arduinoGenerator: Arduino } = goog.require('Blockly.Arduino');\n \n\nArduino['leaphy_flitz_read_stomach_sensor'] = function (block){\n    var sensorType = block.getFieldValue('SENSOR_TYPE');\n    var code = '';\n    var setup = '';\n    if(sensorType == \"1\"){\n        setup = 'pinMode(8, OUTPUT);\\n  pinMode(9, OUTPUT);\\n  pinMode(10, INPUT);\\n  digitalWrite(8, LOW);\\n  digitalWrite(9, HIGH);\\n'    \n        code = 'digitalRead(10)'\n    } else if(sensorType == \"2\"){\n        setup = 'pinMode(8, INPUT);\\n  pinMode(9, OUTPUT);\\n  pinMode(10, OUTPUT);\\n  digitalWrite(8, LOW);\\n  digitalWrite(9, HIGH);\\n'\n        code = 'digitalRead(8)'\n    }\n    Arduino.setups_['setup_flitz_stomach'] = setup;    \n    return [code, Arduino.ORDER_ATOMIC];\n};\n\nArduino['leaphy_flitz_read_hand_sensor'] = function (block){\n    Arduino.setups_['setup_flitz_stomach'] = 'pinMode(14, OUTPUT);\\n pinMode(15, OUTPUT);\\n pinMode(2, INPUT);\\n digitalWrite(14, HIGH);\\n digitalWrite(15, LOW);\\n'\n    var code = 'analogRead(2)'\n    return [code, Arduino.ORDER_ATOMIC];\n};\n\nArduino['leaphy_flitz_led'] = function (block){\n    Arduino.setups_['setup_flitz_led'] = ''\n    var flitz_red = Arduino.valueToCode(this, 'FLITZ_LED_R', Arduino.ORDER_ATOMIC) || '0'\n    var flitz_green = Arduino.valueToCode(this, 'FLITZ_LED_G', Arduino.ORDER_ATOMIC) || '0'\n    var flitz_blue = Arduino.valueToCode(this, 'FLITZ_LED_B', Arduino.ORDER_ATOMIC) || '0' \n    //var code = 'setLedd(' + flitz_red + ', ' + flitz_green + ', ' + flitz_blue + ');\\n';\n    var code = 'analogWrite(3, ' + flitz_red + ');\\nanalogWrite(5, ' + flitz_green + ');\\nanalogWrite(6, ' + flitz_blue + ');\\n';\n    return code;\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Arduino for Leaphy Extra blocks.\n */\n 'use strict';\n\ngoog.module('Blockly.Arduino.leaphyExtra');\n \nconst { arduinoGenerator: Arduino } = goog.require('Blockly.Arduino');\n\nvar includeDefinition = '#include \"Adafruit_TCS34725.h\"';\nvar variablesDefinition = 'Adafruit_TCS34725 tcs = Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_24MS, TCS34725_GAIN_16X);\\nuint16_t RawColor_Red, RawColor_Green, RawColor_Blue, RawColor_Clear;\\nbyte Color_Red, Color_Green, Color_Blue, Color_Clear;\\n';\nvar getColorDefinition = 'double getColor(int colorCode, bool isRaw) {\\n'\n                            + '  tcs.getRawData(&RawColor_Red, &RawColor_Green, &RawColor_Blue, &RawColor_Clear);\\n'\n                            + '  Color_Red = min(RawColor_Red/5,255); Color_Green = min(RawColor_Green/5,255); Color_Blue = min(RawColor_Blue/5,255);\\n'\n                            + '  switch(colorCode) {\\n'\n                            + '    case 0:\\n'\n                            + '      return (isRaw) ? RawColor_Red : Color_Red;\\n'\n                            + '    case 1:\\n'\n                            + '      return (isRaw) ? RawColor_Green : Color_Green;\\n'\n                            + '    case 2:\\n'\n                            + '      return (isRaw) ? RawColor_Blue : Color_Blue;\\n'\n                            + '  }\\n'\n                            + '}\\n';\n\nvar rgbColorSetupCode = 'if (tcs.begin()) {\\n    Serial.println(\"RGB-sensor gevonden!\");\\n  } else {\\n    Serial.println(\"Geen RGB-sensor gevonden... check je verbindingen...\");\\n  }';\n\nArduino['leaphy_rgb_color'] = function (block) {\n    Arduino.definitions_['define_leaphy_rgb'] = includeDefinition;\n    Arduino.definitions_['define_leaphy_rgb_var'] = variablesDefinition;\n    Arduino.definitions_['define_get_color'] = getColorDefinition;\n    Arduino.addSetup('rgb_color_setup', rgbColorSetupCode, false);\n\n    var colorType = block.getFieldValue('COLOR_TYPE');\n    var code = 'getColor(' + colorType + ', false)';\n    return [code, Arduino.ORDER_ATOMIC];\n};\n\nArduino['leaphy_rgb_color_raw'] = function (block) {\n    Arduino.definitions_['define_leaphy_rgb'] = includeDefinition;\n    Arduino.definitions_['define_leaphy_rgb_var'] = variablesDefinition;\n    Arduino.definitions_['define_get_color'] = getColorDefinition;\n    Arduino.addSetup('rgb_color_setup', rgbColorSetupCode, false);\n\n    var colorType = block.getFieldValue('COLOR_TYPE_RAW');\n    var code = 'getColor(' + colorType + ', true)';\n    return [code, Arduino.ORDER_ATOMIC];\n};\n\nArduino['leaphy_rgb_raw_color_red'] = function (block) {\n    Arduino.definitions_['define_leaphy_rgb'] = includeDefinition;\n    Arduino.definitions_['define_leaphy_rgb_var'] = variablesDefinition;\n    var code = 'RawColor_Red';\n    return [code, Arduino.ORDER_ATOMIC];\n};\n\nArduino['leaphy_rgb_raw_color_green'] = function (block) {\n    Arduino.definitions_['define_leaphy_rgb'] = includeDefinition;\n    Arduino.definitions_['define_leaphy_rgb_var'] = variablesDefinition;\n    var code = 'RawColor_Green';\n    return [code, Arduino.ORDER_ATOMIC];\n};\n\nArduino['leaphy_rgb_raw_color_blue'] = function (block) {\n    Arduino.definitions_['define_leaphy_rgb'] = includeDefinition;\n    Arduino.definitions_['define_leaphy_rgb_var'] = variablesDefinition;\n    var code = 'RawColor_Blue';\n    return [code, Arduino.ORDER_ATOMIC];\n};\n\nArduino['leaphy_led_set_strip'] = function (block) {\n    var pin = Arduino.valueToCode(this, 'LED_SET_PIN', Arduino.ORDER_ATOMIC) || '0'\n    var leds = Arduino.valueToCode(this, 'LED_SET_LEDS', Arduino.ORDER_ATOMIC) || '0'\n    Arduino.definitions_['define_led_lib'] = '#include \"ledstrip.h\"';\n    Arduino.definitions_['define_leds_pins'] = 'LEDSTRIP ledstrip(' + pin + ', ' + leds + ');';\n    var code = '';\n    return code;\n};\n\nArduino['leaphy_led_set_basic'] = function (block) {\n    var led = Arduino.valueToCode(this, 'LED_BASIC_LED', Arduino.ORDER_ATOMIC) || '0'\n    var red = Arduino.valueToCode(this, 'LED_BASIC_RED', Arduino.ORDER_ATOMIC) || '0'\n    var green = Arduino.valueToCode(this, 'LED_BASIC_GREEN', Arduino.ORDER_ATOMIC) || '0'\n    var blue = Arduino.valueToCode(this, 'LED_BASIC_BLUE', Arduino.ORDER_ATOMIC) || '0'\n    var code = 'ledstrip.basis(' + led + ', ' + red + ', ' + green + ', ' + blue + ');\\n';\n    return code;\n};\n\nArduino['leaphy_led_set_speed'] = function (block) {\n    var speedValue = Arduino.valueToCode(this, 'LED_SET_SPEEDVALUE', Arduino.ORDER_ATOMIC) || '0'\n    var code = '_snelHeid = ' + speedValue + ';\\n';\n    return code;\n};\n\nArduino['leaphy_led_strip_demo'] = function (block) {\n    var dropdownType = block.getFieldValue('DEMO_TYPE');\n    var red = Arduino.valueToCode(this, 'LED_STRIP_DEMO_RED', Arduino.ORDER_ATOMIC) || '0'\n    var green = Arduino.valueToCode(this, 'LED_STRIP_DEMO_GREEN', Arduino.ORDER_ATOMIC) || '0'\n    var blue = Arduino.valueToCode(this, 'LED_STRIP_DEMO_BLUE', Arduino.ORDER_ATOMIC) || '0'\n    var code = 'ledstrip.runFunction(' + dropdownType + ', ' + red + ', ' + green + ', ' + blue + ');\\n';\n    return code;\n};\n\nArduino['leaphy_servo_write'] = function (block) {\n    var pinKey = block.getFieldValue('SERVO_PIN');\n    var servoAngle = Arduino.valueToCode(\n        block, 'SERVO_ANGLE', Arduino.ORDER_ATOMIC) || '90';\n    var servoName = 'myServo' + pinKey;\n\n    Arduino.reservePin(\n        block, pinKey, Arduino.PinTypes.SERVO, 'Servo Write');\n\n    Arduino.addInclude('servo', '#include <Servo.h>');\n    Arduino.addDeclaration('servo_' + pinKey, 'Servo ' + servoName + ';');\n\n    var setupCode = servoName + '.attach(' + pinKey + ');';\n    Arduino.addSetup('servo_' + pinKey, setupCode, true);\n\n    var code = servoName + '.write(' + servoAngle + ');\\n';\n    return code;\n};\n\n/**\n * Code generator to read an angle value from a servo pin (X).\n * Arduino code: #include <Servo.h>\n *               Servo myServoX;\n *               setup { myServoX.attach(X); }\n *               loop  { myServoX.read();    }\n * @param {!Block} block Block to generate the code from.\n * @return {array} Completed code with order of operation.\n */\n\nArduino['leaphy_servo_read'] = function (block) {\n    var pinKey = block.getFieldValue('SERVO_PIN');\n    var servoName = 'myServo' + pinKey;\n\n    Arduino.reservePin(\n        block, pinKey, Arduino.PinTypes.SERVO, 'Servo Read');\n\n    Arduino.addInclude('servo', '#include <Servo.h>');\n    Arduino.addDeclaration('servo_' + pinKey, 'Servo ' + servoName + ';');\n\n    var setupCode = servoName + '.attach(' + pinKey + ');';\n    Arduino.addSetup('servo_' + pinKey, setupCode, true);\n\n    var code = servoName + '.read()';\n    return [code, Arduino.ORDER_ATOMIC];\n};\n\nArduino['leaphy_io_digitalwrite'] = function (block) {\n    var pin = block.getFieldValue('PIN');\n    var stateOutput = Arduino.valueToCode(block, 'STATE', Arduino.ORDER_ATOMIC) || 'false';\n    if (stateOutput == 'true'){\n        stateOutput = 'HIGH';\n    } else {\n        stateOutput = 'LOW';\n    }\n\n    Arduino.reservePin(\n        block, pin, Arduino.PinTypes.OUTPUT, 'Digital Write');\n\n    var pinSetupCode = 'pinMode(' + pin + ', OUTPUT);';\n    Arduino.addSetup('io_' + pin, pinSetupCode, false);\n\n    var code = 'digitalWrite(' + pin + ', ' + stateOutput + ');\\n';\n    return code;\n};\n\nArduino['leaphy_io_analogwrite'] = function (block) {\n    var pin = block.getFieldValue('PIN');\n    var stateOutput = Arduino.valueToCode(\n        block, 'NUM', Arduino.ORDER_ATOMIC) || '0';\n\n    Arduino.reservePin(\n        block, pin, Arduino.PinTypes.OUTPUT, 'Analogue Write');\n\n    var pinSetupCode = 'pinMode(' + pin + ', OUTPUT);';\n    Arduino.addSetup('io_' + pin, pinSetupCode, false);\n\n    // Warn if the input value is out of range\n    if ((stateOutput < 0) || (stateOutput > 255)) {\n        block.setWarningText('The analogue value set must be between 0 and 255',\n            'pwm_value');\n    } else {\n        block.setWarningText(null, 'pwm_value');\n    }\n\n    var code = 'analogWrite(' + pin + ', ' + stateOutput + ');\\n';\n    return code;\n};\n\nArduino['leaphy_sonar_read'] = function (block) {\n    Arduino.addInclude('leaphy_extra', '#include \"Leaphy_Extra.h\"');\n    var trigPin = block.getFieldValue('TRIG_PIN');\n    var echoPin = block.getFieldValue('ECHO_PIN');\n    var code = 'getDistanceSonar(' + trigPin + ', ' + echoPin + ')';\n    return [code, Arduino.ORDER_ATOMIC];\n};\n\nvar displayInclude = '#include \"OLED_Display.h\"';\nvar displayDefinition = 'OLEDDISPLAY display;';\nvar displaySetup = 'if(!display.begin())\\n  {\\n    Serial.println(F(\"Contact with the display failed: Check the connections\"));\\n  }\\n';\nvar displaySerialSetup = 'Serial.begin(115200);';\n\nvar addDisplaySetupCode = function(){\n    Arduino.addInclude('include_display', displayInclude);\n    Arduino.definitions_['define_display'] = displayDefinition;\n    Arduino.addSetup('serial', displaySerialSetup, false);\n    Arduino.addSetup('oled', displaySetup, false);\n}\n\nArduino['leaphy_display_clear'] = function(block) {\n    addDisplaySetupCode();\n    var code = 'display.clearDisplay();\\n';\n    return code;\n};\n\nArduino['leaphy_display_print_line'] = function(block) {\n    addDisplaySetupCode();\n\n    var value = Arduino.valueToCode(this, 'VALUE', Arduino.ORDER_ATOMIC) || '0';\n    var row = Arduino.valueToCode(this, 'DISPLAY_ROW', Arduino.ORDER_ATOMIC) || '0';\n    var row = block.getFieldValue('DISPLAY_ROW');\n    var cursorHeight = row * 12;\n    var code = 'display.setCursor(0,' + cursorHeight + ');\\ndisplay.println(' + value + ');\\n';\n    return code;\n};\n\nArduino['leaphy_display_print_value'] = function(block) {\n    addDisplaySetupCode();\n\n    var name = Arduino.valueToCode(this, 'NAME', Arduino.ORDER_ATOMIC) || '0';\n    var value = Arduino.valueToCode(this, 'VALUE', Arduino.ORDER_ATOMIC) || '0';\n    var row = block.getFieldValue('DISPLAY_ROW');\n    var cursorHeight = row * 12;\n    var code = 'display.setCursor(0,' + cursorHeight + ');\\ndisplay.print(' + name + ');\\ndisplay.print(\" = \");\\ndisplay.println(' + value + ');\\n';\n    return code;\n};\n\nArduino['leaphy_display_display'] = function(block) {\n    addDisplaySetupCode();\n    var code = 'display.display();\\n';\n    return code;\n};\n\nArduino['leaphy_update_lsm9ds1'] = function(block) {\n    return \"  lsm.read();  /* ask it to read in the data */  \\n \\n  /* Get a new sensor event */  \\n  sensors_event_t a, m, g, temp; \\n \\n  lsm.getEvent(&a, &m, &g, &temp);\"\n}\n\nArduino['leaphy_use_lsm9ds1'] = function(block) {\n    var sensor = block.getFieldValue('SENSOR');\n    var axis = block.getFieldValue('AXIS');\n    Arduino.addInclude('adafruit_lsm9ds1', '#include <Adafruit_LSM9DS1.h>');\n    Arduino.addDeclaration('lsm9ds1_declaration', 'Adafruit_LSM9DS1 lsm = Adafruit_LSM9DS1();\\n');\n    Arduino.addFunction('lsm9ds1_setttings', 'void setupSettings()\\n{\\n    lsm.setupAccel(lsm.LSM9DS1_ACCELRANGE_2G);\\n    lsm.setupMag(lsm.LSM9DS1_MAGGAIN_4GAUSS);\\n    lsm.setupGyro(lsm.LSM9DS1_GYROSCALE_245DPS);\\n}\\n');\n    Arduino.addSetup(\"lsm9ds1_setup', 'void setup()  \\n{ \\n  Serial.begin(115200); \\n \\n  while (!Serial) { \\n    delay(1); // will pause Zero, Leonardo, etc until serial console opens \\n  } \\n   \\n  Serial.println('LSM9DS1 data read demo'); \\n   \\n  // Try to initialise and warn if we couldn't detect the chip \\n  if (!lsm.begin()) \\n  { \\n    Serial.println('Oops ... unable to initialize the LSM9DS1. Check your wiring!'); \\n    while (1); \\n  } \\n  Serial.println('Found LSM9DS1 9DOF'); \\n \\n  // helper to just set the default scaling we want, see above! \\n  setupSensor(); \\n}\");\n    return [sensor + axis, Arduino.ORDER_ATOMIC]\n}","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Arduino for Arduino blocks.\n */\n 'use strict';\n\ngoog.module('Blockly.Arduino.arduino');\n \nconst { arduinoGenerator: Arduino } = goog.require('Blockly.Arduino');\n \n\nArduino['time_delay'] = function (block) {\n    var delayTime = Arduino.valueToCode(\n        block, 'DELAY_TIME_MILI', Arduino.ORDER_ATOMIC) || '0';\n    var code = 'delay(' + delayTime + ');\\n';\n    return code;  \n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Arduino for maths blocks.\n */\n'use strict';\n\ngoog.module('Blockly.Arduino.math');\n\nconst { arduinoGenerator: Arduino } = goog.require('Blockly.Arduino');\nconst {NameType} = goog.require('Blockly.Names');\n\n\n/**\n * Generator for a numeric value (X).\n * Arduino code: loop { X }\n * @param {!Block} block Block to generate the code from.\n * @return {array} Completed code with order of operation.\n */\nArduino['math_number'] = function (block) {\n    // Numeric value.\n    var code = parseFloat(block.getFieldValue('NUM'));\n    if (code == Infinity) {\n        code = 'INFINITY';\n    } else if (code == -Infinity) {\n        code = '-INFINITY';\n    }\n    return [code, Arduino.ORDER_ATOMIC];\n};\n\n/**\n * Generator for a basic arithmetic operators (X and Y) and power function\n * (X ^ Y).\n * Arduino code: loop { X operator Y }\n * @param {!Block} block Block to generate the code from.\n * @return {array} Completed code with order of operation.\n */\nArduino['math_arithmetic'] = function (block) {\n    var OPERATORS = {\n        ADD: [' + ', Arduino.ORDER_ADDITIVE],\n        MINUS: [' - ', Arduino.ORDER_ADDITIVE],\n        MULTIPLY: [' * ', Arduino.ORDER_MULTIPLICATIVE],\n        DIVIDE: [' / ', Arduino.ORDER_MULTIPLICATIVE],\n        POWER: [null, Arduino.ORDER_NONE]  // Handle power separately.\n    };\n    var tuple = OPERATORS[block.getFieldValue('OP')];\n    var operator = tuple[0];\n    var order = tuple[1];\n    var argument0 = Arduino.valueToCode(block, 'A', order) || '0';\n    var argument1 = Arduino.valueToCode(block, 'B', order) || '0';\n    var code;\n    // Power in C++ requires a special case since it has no operator.\n    if (!operator) {\n        code = 'Math.pow(' + argument0 + ', ' + argument1 + ')';\n        return [code, Arduino.ORDER_UNARY_POSTFIX];\n    }\n    code = argument0 + operator + argument1;\n    return [code, order];\n};\n\n/**\n * Generator for math operators that contain a single operand (X).\n * Arduino code: loop { operator(X) }\n * @param {!Block} block Block to generate the code from.\n * @return {array} Completed code with order of operation.\n */\nArduino['math_single'] = function (block) {\n    var operator = block.getFieldValue('OP');\n    var code;\n    var arg;\n    if (operator == 'NEG') {\n        // Negation is a special case given its different operator precedents.\n        arg = Arduino.valueToCode(block, 'NUM',\n            Arduino.ORDER_UNARY_PREFIX) || '0';\n        if (arg[0] == '-') {\n            // --3 is not legal in C++ in this context.\n            arg = ' ' + arg;\n        }\n        code = '-' + arg;\n        return [code, Arduino.ORDER_UNARY_PREFIX];\n    }\n    if (operator == 'ABS' || operator.substring(0, 5) == 'ROUND') {\n        arg = Arduino.valueToCode(block, 'NUM',\n            Arduino.ORDER_UNARY_POSTFIX) || '0';\n    } else if (operator == 'SIN' || operator == 'COS' || operator == 'TAN') {\n        arg = Arduino.valueToCode(block, 'NUM',\n            Arduino.ORDER_MULTIPLICATIVE) || '0';\n    } else {\n        arg = Arduino.valueToCode(block, 'NUM',\n            Arduino.ORDER_NONE) || '0';\n    }\n    // First, handle cases which generate values that don't need parentheses.\n    switch (operator) {\n        case 'ABS':\n            code = 'abs(' + arg + ')';\n            break;\n        case 'ROOT':\n            code = 'sqrt(' + arg + ')';\n            break;\n        case 'LN':\n            code = 'log(' + arg + ')';\n            break;\n        case 'EXP':\n            code = 'exp(' + arg + ')';\n            break;\n        case 'POW10':\n            code = 'pow(10,' + arg + ')';\n            break;\n        case 'ROUND':\n            code = 'round(' + arg + ')';\n            break;\n        case 'ROUNDUP':\n            code = 'ceil(' + arg + ')';\n            break;\n        case 'ROUNDDOWN':\n            code = 'floor(' + arg + ')';\n            break;\n        case 'SIN':\n            code = 'sin(' + arg + ' / 180 * M_PI)';\n            break;\n        case 'COS':\n            code = 'cos(' + arg + ' / 180 * M_PI)';\n            break;\n        case 'TAN':\n            code = 'tan(' + arg + ' / 180 * M_PI)';\n            break;\n    }\n    if (code) {\n        return [code, Arduino.ORDER_UNARY_POSTFIX];\n    }\n    // Second, handle cases which generate values that may need parentheses.\n    switch (operator) {\n        case 'LOG10':\n            code = 'log(' + arg + ') / log(10)';\n            break;\n        case 'ASIN':\n            code = 'asin(' + arg + ') / M_PI * 180';\n            break;\n        case 'ACOS':\n            code = 'acos(' + arg + ') / M_PI * 180';\n            break;\n        case 'ATAN':\n            code = 'atan(' + arg + ') / M_PI * 180';\n            break;\n        default:\n            throw 'Unknown math operator: ' + operator;\n    }\n    return [code, Arduino.ORDER_MULTIPLICATIVE];\n};\n\n/**\n * Generator for math constants (PI, E, the Golden Ratio, sqrt(2), 1/sqrt(2),\n * INFINITY).\n * Arduino code: loop { constant }\n * TODO: Might need to include \"#define _USE_MATH_DEFINES\"\n *       The arduino header file already includes math.h\n * @param {!Block} block Block to generate the code from.\n * @return {string} Completed code.\n */\nArduino['math_constant'] = function (block) {\n    var CONSTANTS = {\n        'PI': ['M_PI', Arduino.ORDER_UNARY_POSTFIX],\n        'E': ['M_E', Arduino.ORDER_UNARY_POSTFIX],\n        'GOLDEN_RATIO': ['(1 + sqrt(5)) / 2', Arduino.ORDER_MULTIPLICATIVE],\n        'SQRT2': ['M_SQRT2', Arduino.ORDER_UNARY_POSTFIX],\n        'SQRT1_2': ['M_SQRT1_2', Arduino.ORDER_UNARY_POSTFIX],\n        'INFINITY': ['INFINITY', Arduino.ORDER_ATOMIC]\n    };\n    return CONSTANTS[block.getFieldValue('CONSTANT')];\n};\n\n/**\n * Generator for math checks: if a number is even, odd, prime, whole, positive,\n * negative, or if it is divisible by certain number. Returns true or false.\n * Arduino code: complex code, can create external functions.\n * @param {!Block} block Block to generate the code from.\n * @return {array} Completed code with order of operation.\n */\nArduino['math_number_property'] = function (block) {\n    var number_to_check = Arduino.valueToCode(block, 'NUMBER_TO_CHECK',\n        Arduino.ORDER_MULTIPLICATIVE) || '0';\n    var dropdown_property = block.getFieldValue('PROPERTY');\n    var code;\n    if (dropdown_property == 'PRIME') {\n        var func = [\n            'boolean ' + Arduino.DEF_FUNC_NAME + '(int n) {',\n            '  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods',\n            '  if (n == 2 || n == 3) {',\n            '    return true;',\n            '  }',\n            '  // False if n is NaN, negative, is 1.',\n            '  // And false if n is divisible by 2 or 3.',\n            '  if (isnan(n) || (n <= 1) || (n == 1) || (n % 2 == 0) || ' +\n            '(n % 3 == 0)) {',\n            '    return false;',\n            '  }',\n            '  // Check all the numbers of form 6k +/- 1, up to sqrt(n).',\n            '  for (int x = 6; x <= sqrt(n) + 1; x += 6) {',\n            '    if (n % (x - 1) == 0 || n % (x + 1) == 0) {',\n            '      return false;',\n            '    }',\n            '  }',\n            '  return true;',\n            '}'];\n        var funcName = Arduino.addFunction('mathIsPrime', func.join('\\n'));\n        Arduino.addInclude('math', '#include <math.h>');\n        code = funcName + '(' + number_to_check + ')';\n        return [code, Arduino.ORDER_UNARY_POSTFIX];\n    }\n    switch (dropdown_property) {\n        case 'EVEN':\n            code = number_to_check + ' % 2 == 0';\n            break;\n        case 'ODD':\n            code = number_to_check + ' % 2 == 1';\n            break;\n        case 'WHOLE':\n            Arduino.addInclude('math', '#include <math.h>');\n            code = '(floor(' + number_to_check + ') == ' + number_to_check + ')';\n            break;\n        case 'POSITIVE':\n            code = number_to_check + ' > 0';\n            break;\n        case 'NEGATIVE':\n            code = number_to_check + ' < 0';\n            break;\n        case 'DIVISIBLE_BY':\n            var divisor = Arduino.valueToCode(block, 'DIVISOR',\n                Arduino.ORDER_MULTIPLICATIVE) || '0';\n            code = number_to_check + ' % ' + divisor + ' == 0';\n            break;\n    }\n    return [code, Arduino.ORDER_EQUALITY];\n};\n\n/**\n * Generator to add (Y) to a variable (X).\n * If variable X has not been declared before this block it will be declared as\n * a (not initialised) global int, however globals are 0 initialised in C/C++.\n * Arduino code: loop { X += Y; }\n * @param {!Block} block Block to generate the code from.\n * @return {array} Completed code with order of operation.\n */\nArduino['math_change'] = function (block) {\n    var argument0 = Arduino.valueToCode(block, 'DELTA',\n        Arduino.ORDER_ADDITIVE) || '0';\n    var varName = Arduino.nameDB_.getName(\n        block.getFieldValue('VAR'), NameType.VARIABLE);\n    return varName + ' += ' + argument0 + ';\\n';\n};\n\n/** Rounding functions have a single operand. */\nArduino['math_round'] = Arduino['math_single'];\n\n/** Trigonometry functions have a single operand. */\nArduino['math_trig'] = Arduino['math_single'];\n\n/**\n * Generator for the math function to a list.\n * Arduino code: ???\n * TODO: List have to be implemented first. Removed from toolbox for now.\n * @param {!Block} block Block to generate the code from.\n * @return {array} Completed code with order of operation.\n */\nArduino['math_on_list'] = Arduino.noGeneratorCodeInline;\n\n/**\n * Generator for the math modulo function (calculates remainder of X/Y).\n * Arduino code: loop { X % Y }\n * @param {!Block} block Block to generate the code from.\n * @return {array} Completed code with order of operation.\n */\nArduino['math_modulo'] = function (block) {\n    var argument0 = Arduino.valueToCode(block, 'DIVIDEND',\n        Arduino.ORDER_MULTIPLICATIVE) || '0';\n    var argument1 = Arduino.valueToCode(block, 'DIVISOR',\n        Arduino.ORDER_MULTIPLICATIVE) || '0';\n    var code = argument0 + ' % ' + argument1;\n    return [code, Arduino.ORDER_MULTIPLICATIVE];\n};\n\n/**\n * Generator for clipping a number(X) between two limits (Y and Z).\n * Arduino code: loop { (X < Y ? Y : ( X > Z ? Z : X)) }\n * @param {!Block} block Block to generate the code from.\n * @return {array} Completed code with order of operation.\n */\nArduino['math_constrain'] = function (block) {\n    // Constrain a number between two limits.\n    var argument0 = Arduino.valueToCode(block, 'VALUE',\n        Arduino.ORDER_NONE) || '0';\n    var argument1 = Arduino.valueToCode(block, 'LOW',\n        Arduino.ORDER_NONE) || '0';\n    var argument2 = Arduino.valueToCode(block, 'HIGH',\n        Arduino.ORDER_NONE) || '0';\n    var code = '(' + argument0 + ' < ' + argument1 + ' ? ' + argument1 +\n        ' : ( ' + argument0 + ' > ' + argument2 + ' ? ' + argument2 + ' : ' +\n        argument0 + '))';\n    return [code, Arduino.ORDER_UNARY_POSTFIX];\n};\n\n/**\n * Generator for a random integer between two numbers (X and Y).\n * Arduino code: loop { math_random_int(X, Y); }\n *               and an aditional math_random_int function\n * @param {!Block} block Block to generate the code from.\n * @return {array} Completed code with order of operation.\n */\nArduino['math_random_int'] = function (block) {\n    var argument0 = Arduino.valueToCode(block, 'FROM',\n        Arduino.ORDER_NONE) || '0';\n    var argument1 = Arduino.valueToCode(block, 'TO',\n        Arduino.ORDER_NONE) || '0';\n    var functionName = Arduino.nameDB_.getDistinctName(\n        'math_random_int', NameType.PROCEDURE);\n    Arduino.math_random_int.random_function = functionName;\n    var func = [\n        'int ' + Arduino.DEF_FUNC_NAME + '(int min, int max) {',\n        '  if (min > max) {',\n        '    // Swap min and max to ensure min is smaller.',\n        '    int temp = min;',\n        '    min = max;',\n        '    max = temp;',\n        '  }',\n        '  return min + (rand() % (max - min + 1));',\n        '}'];\n    var funcName = Arduino.addFunction('mathRandomInt', func.join('\\n'));\n    var code = funcName + '(' + argument0 + ', ' + argument1 + ')';\n    return [code, Arduino.ORDER_UNARY_POSTFIX];\n};\n\n/**\n * Generator for a random float from 0 to 1.\n * Arduino code: loop { (rand() / RAND_MAX) }\n * @param {!Block} block Block to generate the code from.\n * @return {string} Completed code.\n */\nArduino['math_random_float'] = function (block) {\n    return ['(rand() / RAND_MAX)', Arduino.ORDER_UNARY_POSTFIX];\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Arduino for loops blocks.\n */\n 'use strict';\n\n\ngoog.module('Blockly.Arduino.loops');\n\nconst { arduinoGenerator: Arduino } = goog.require('Blockly.Arduino');\nconst {NameType} = goog.require('Blockly.Names');\nconst stringUtils = goog.require('Blockly.utils.string');\n\n/**\n * Generator for the repeat block (number in a drop down) using a For loop\n * statement.\n * Arduino code: loop { for (int count = 0; count < X; count++) { Y } }\n * @param {!Block} block Block to generate the code from.\n * @return {string} Completed code.\n */\nArduino['controls_repeat'] = function(block) {\n  var repeats = Number(block.getFieldValue('TIMES'));\n  var branch = Arduino.statementToCode(block, 'DO');\n  branch = Arduino.addLoopTrap(branch, block.id);\n  var loopVar = Arduino.nameDB_.getDistinctName('count', NameType.VARIABLE);\n  var code = 'for (int ' + loopVar + ' = 0; ' +\n      loopVar + ' < ' + repeats + '; ' +\n      loopVar + '++) {\\n' +\n      branch + '}\\n';\n  return code;\n};\n\n/**\n * Generator for the repeat block (using external number block) using a\n * For loop statement.\n * Arduino code: loop { for (int count = 0; count < X; count++) { Y } }\n * @param {!Block} block Block to generate the code from.\n * @return {string} Completed code.\n */\nArduino['controls_repeat_ext'] = function(block) {\n  var repeats = Arduino.valueToCode(block, 'TIMES',\n      Arduino.ORDER_ADDITIVE) || '0';\n  var branch = Arduino.statementToCode(block, 'DO');\n  branch = Arduino.addLoopTrap(branch, block.id);\n  var code = '';\n  var loopVar = Arduino.nameDB_.getDistinctName(\n      'count', NameType.VARIABLE);\n  var endVar = repeats;\n  if (!repeats.match(/^\\w+$/) && !stringUtils.isNumber(repeats)) {\n    var endVar = Arduino.nameDB_.getDistinctName(\n        'repeat_end', NameType.VARIABLE);\n    code += 'int ' + endVar + ' = ' + repeats + ';\\n';\n  }\n  code += 'for (int ' + loopVar + ' = 0; ' +\n      loopVar + ' < ' + endVar + '; ' +\n      loopVar + '++) {\\n' +\n      branch + '}\\n';\n  return code;\n};\n\nArduino['controls_repeat_forever'] = function(block) {\n  var branch = Arduino.statementToCode(block, 'DO');\n  branch = Arduino.addLoopTrap(branch, block.id);\n  return 'while (true) {\\n' + branch + '}\\n';\n};\n\n/**\n * Generator for the repeat while block using a While statement.\n * Arduino code: loop { while (X) { Y } }\n * @param {!Block} block Block to generate the code from.\n * @return {string} Completed code.\n */\nArduino['controls_whileUntil'] = function(block) {\n  // Do while/until loop.\n  var until = block.getFieldValue('MODE') == 'UNTIL';\n  var argument0 = Arduino.valueToCode(block, 'BOOL',\n      until ? Arduino.ORDER_LOGICAL_OR :\n      Arduino.ORDER_NONE) || 'false';\n  var branch = Arduino.statementToCode(block, 'DO');\n  branch = Arduino.addLoopTrap(branch, block.id);\n  if (until) {\n    if (!argument0.match(/^\\w+$/)) {\n      argument0 = '(' + argument0 + ')';\n    }\n    argument0 = '!' + argument0;\n  }\n  return 'while (' + argument0 + ') {\\n' + branch + '}\\n';\n};\n\n/**\n * Generator for the For loop statements.\n * Arduino code: loop { for (i = X; i <= Y; i+=Z) { } }\n * @param {!Block} block Block to generate the code from.\n * @return {string} Completed code.\n */\nArduino['controls_for'] = function(block) {\n  var variable0 = Arduino.nameDB_.getName(\n      block.getFieldValue('VAR'), NameType.VARIABLE);\n  var argument0 = Arduino.valueToCode(block, 'FROM',\n      Arduino.ORDER_ASSIGNMENT) || '0';\n  var argument1 = Arduino.valueToCode(block, 'TO',\n      Arduino.ORDER_ASSIGNMENT) || '0';\n  var increment = Arduino.valueToCode(block, 'BY',\n      Arduino.ORDER_ASSIGNMENT) || '1';\n  var branch = Arduino.statementToCode(block, 'DO');\n  branch = Arduino.addLoopTrap(branch, block.id);\n  var code;\n  if (stringUtils.isNumber(argument0) && stringUtils.isNumber(argument1) &&\n      stringUtils.isNumber(increment)) {\n    // All arguments are simple numbers.\n    var up = parseFloat(argument0) <= parseFloat(argument1);\n    code = 'for (' + variable0 + ' = ' + argument0 + '; ' +\n        variable0 + (up ? ' <= ' : ' >= ') + argument1 + '; ' +\n        variable0;\n    var step = Math.abs(parseFloat(increment));\n    if (step == 1) {\n      code += up ? '++' : '--';\n    } else {\n      code += (up ? ' += ' : ' -= ') + step;\n    }\n    code += ') {\\n' + branch + '}\\n';\n  } else {\n    code = '';\n    // Cache non-trivial values to variables to prevent repeated look-ups.\n    var startVar = argument0;\n    if (!argument0.match(/^\\w+$/) && !stringUtils.isNumber(argument0)) {\n      var startVar = Arduino.nameDB_.getDistinctName(\n          variable0 + '_start', NameType.VARIABLE);\n      code += 'int ' + startVar + ' = ' + argument0 + ';\\n';\n    }\n    var endVar = argument1;\n    if (!argument1.match(/^\\w+$/) && !stringUtils.isNumber(argument1)) {\n      var endVar = Arduino.nameDB_.getDistinctName(\n          variable0 + '_end', NameType.VARIABLE);\n      code += 'int ' + endVar + ' = ' + argument1 + ';\\n';\n    }\n    // Determine loop direction at start, in case one of the bounds\n    // changes during loop execution.\n    var incVar = Arduino.nameDB_.getDistinctName(\n        variable0 + '_inc', NameType.VARIABLE);\n    code += 'int ' + incVar + ' = ';\n    if (stringUtils.isNumber(increment)) {\n      code += Math.abs(increment) + ';\\n';\n    } else {\n      code += 'abs(' + increment + ');\\n';\n    }\n    code += 'if (' + startVar + ' > ' + endVar + ') {\\n';\n    code += Arduino.INDENT + incVar + ' = -' + incVar + ';\\n';\n    code += '}\\n';\n    code += 'for (' + variable0 + ' = ' + startVar + ';\\n' +\n        '     ' + incVar + ' >= 0 ? ' +\n        variable0 + ' <= ' + endVar + ' : ' +\n        variable0 + ' >= ' + endVar + ';\\n' +\n        '     ' + variable0 + ' += ' + incVar + ') {\\n' +\n        branch + '}\\n';\n  }\n  return code;\n};\n\n/**\n * A \"for each\" block.\n * TODO: Removed for now from toolbox as lists are not yet implemented.\n * @param {!Block} block Block to generate the code from.\n * @return {string} Completed code.\n */\nArduino['controls_forEach'] = Arduino.noGeneratorCodeLine;\n\n/**\n * Generator for the loop flow control statements.\n * Arduino code: loop { break;/continue; }\n * @param {!Block} block Block to generate the code from.\n * @return {string} Completed code.\n */\nArduino['controls_flow_statements'] = function(block) {\n  switch (block.getFieldValue('FLOW')) {\n    case 'BREAK':\n      return 'break;\\n';\n    case 'CONTINUE':\n      return 'continue;\\n';\n  }\n  throw 'Unknown flow statement.';\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Arduino for logic blocks.\n */\n'use strict';\n\ngoog.module('Blockly.Arduino.logic');\n\nconst { arduinoGenerator: Arduino } = goog.require('Blockly.Arduino');\n\n\n/**\n * Code generator to create if/if else/else statement.\n * Arduino code: loop { if (X)/else if ()/else { X } }\n * @param {!Block} block Block to generate the code from.\n * @return {string} Completed code.\n */\nArduino['controls_if'] = function (block) {\n  var n = 0;\n  var argument = Arduino.valueToCode(block, 'IF' + n,\n    Arduino.ORDER_NONE) || 'false';\n  var branch = Arduino.statementToCode(block, 'DO' + n);\n  var code = 'if (' + argument + ') {\\n' + branch + '}';\n  for (n = 1; n <= block.elseifCount_; n++) {\n    argument = Arduino.valueToCode(block, 'IF' + n,\n      Arduino.ORDER_NONE) || 'false';\n    branch = Arduino.statementToCode(block, 'DO' + n);\n    code += ' else if (' + argument + ') {\\n' + branch + '}';\n  }\n  if (block.elseCount_) {\n    branch = Arduino.statementToCode(block, 'ELSE');\n    code += ' else {\\n' + branch + '}';\n  }\n  return code + '\\n';\n};\n\n/**\n * Code generator for the comparison operator block.\n * Arduino code: loop { X operator Y }\n * @param {!Block} block Block to generate the code from.\n * @return {array} Completed code with order of operation.\n */\nArduino['logic_compare'] = function (block) {\n  var OPERATORS = {\n    'EQ': '==',\n    'NEQ': '!=',\n    'LT': '<',\n    'LTE': '<=',\n    'GT': '>',\n    'GTE': '>='\n  };\n  var operator = OPERATORS[block.getFieldValue('OP')];\n  var order = (operator == '==' || operator == '!=') ?\n    Arduino.ORDER_EQUALITY : Arduino.ORDER_RELATIONAL;\n  var argument0 = Arduino.valueToCode(block, 'A', order) || '0';\n  var argument1 = Arduino.valueToCode(block, 'B', order) || '0';\n  var code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n};\n\n/**\n * Code generator for the logic operator block.\n * Arduino code: loop { X operator Y }\n * @param {!Block} block Block to generate the code from.\n * @return {array} Completed code with order of operation.\n */\nArduino['logic_operation'] = function (block) {\n  var operator = (block.getFieldValue('OP') == 'AND') ? '&&' : '||';\n  var order = (operator == '&&') ? Arduino.ORDER_LOGICAL_AND :\n    Arduino.ORDER_LOGICAL_OR;\n  var argument0 = Arduino.valueToCode(block, 'A', order) || 'false';\n  var argument1 = Arduino.valueToCode(block, 'B', order) || 'false';\n  if (!argument0 && !argument1) {\n    // If there are no arguments, then the return value is false.\n    argument0 = 'false';\n    argument1 = 'false';\n  } else {\n    // Single missing arguments have no effect on the return value.\n    var defaultArgument = (operator == '&&') ? 'true' : 'false';\n    if (!argument0) {\n      argument0 = defaultArgument;\n    }\n    if (!argument1) {\n      argument1 = defaultArgument;\n    }\n  }\n  var code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n};\n\n/**\n * Code generator for the logic negate operator.\n * Arduino code: loop { !X }\n * @param {!Block} block Block to generate the code from.\n * @return {array} Completed code with order of operation.\n */\nArduino['logic_negate'] = function (block) {\n  var order = Arduino.ORDER_UNARY_PREFIX;\n  var argument0 = Arduino.valueToCode(block, 'BOOL', order) || 'false';\n  var code = '!' + argument0;\n  return [code, order];\n};\n\n/**\n * Code generator for the boolean values true and false.\n * Arduino code: loop { true/false }\n * @param {!Block} block Block to generate the code from.\n * @return {array} Completed code with order of operation.\n */\nArduino['logic_boolean'] = function (block) {\n  var code = (block.getFieldValue('BOOL') == 'TRUE') ? 'true' : 'false';\n  return [code, Arduino.ORDER_ATOMIC];\n};\n\n/**\n * Code generator for the null value.\n * Arduino code: loop { X ? Y : Z }\n * @param {!Block} block Block to generate the code from.\n * @return {array} Completed code with order of operation.\n */\nArduino['logic_null'] = function (block) {\n  var code = 'NULL';\n  return [code, Arduino.ORDER_ATOMIC];\n};\n\n/**\n * Code generator for the ternary operator.\n * Arduino code: loop { NULL }\n * @param {!Block} block Block to generate the code from.\n * @return {array} Completed code with order of operation.\n *\n * TODO: Check types of THEN and ELSE blocks and add warning to this block if\n *       they are different from each other.\n */\nArduino['logic_ternary'] = function (block) {\n  var valueIf = Arduino.valueToCode(block, 'IF',\n    Arduino.ORDER_CONDITIONAL) || 'false';\n  var valueThen = Arduino.valueToCode(block, 'THEN',\n    Arduino.ORDER_CONDITIONAL) || 'null';\n  var valueElse = Arduino.valueToCode(block, 'ELSE',\n    Arduino.ORDER_CONDITIONAL) || 'null';\n  var code = valueIf + ' ? ' + valueThen + ' : ' + valueElse;\n  return [code, Arduino.ORDER_CONDITIONAL];\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Arduino for Variable blocks.\n */\n'use strict';\n\ngoog.module('Blockly.Arduino.variables');\n\nconst { arduinoGenerator: Arduino } = goog.require('Blockly.Arduino');\nconst {NameType} = goog.require('Blockly.Names');\n\n/**\n * Code generator for variable (X) getter.\n * Arduino code: loop { X }\n * @param {!Block} block Block to generate the code from.\n * @return {array} Completed code with order of operation.\n */\nArduino['variables_get'] = function (block) {\n\n    var varName = Arduino.nameDB_.getName(block.getFieldValue('VAR'), NameType.VARIABLE);\n    return [varName, Arduino.ORDER_ATOMIC];\n};\n\n/**\n * Code generator for variable (X) setter (Y).\n * Arduino code: type X;\n *               loop { X = Y; }\n * @param {!Block} block Block to generate the code from.\n * @return {string} Completed code.\n */\nArduino['variables_set'] = function (block) {\n\n    var argument0 = Arduino.valueToCode(block, 'VALUE', Arduino.ORDER_ASSIGNMENT) || '0';\n    var varName = Arduino.nameDB_.getName(block.getFieldValue('VAR'), NameType.VARIABLE);\n\n    return varName + ' = ' + argument0 + ';\\n';\n};","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Arduino for Procedure blocks.\n */\n'use strict';\n\ngoog.module('Blockly.Arduino.procedures');\n\nconst { arduinoGenerator: Arduino } = goog.require('Blockly.Arduino');\nconst { NameType } = goog.require('Blockly.Names');\n\n/**\n * Code generator to create a function with a return value (X).\n * Arduino code: void functionname { return X }\n * @param {!Block} block Block to generate the code from.\n * @return {null} There is no code added to loop.\n */\nArduino['procedures_defreturn'] = function (block) {\n    var funcName = Arduino.nameDB_.getName(\n        block.getFieldValue('NAME'), NameType.PROCEDURE);\n    var branch = Arduino.statementToCode(block, 'STACK');\n    if (Arduino.STATEMENT_PREFIX) {\n        branch = Arduino.prefixLines(\n            Arduino.STATEMENT_PREFIX.replace(/%1/g,\n                '\\'' + block.id + '\\''), Arduino.INDENT) + branch;\n    }\n    if (Arduino.INFINITE_LOOP_TRAP) {\n        branch = Arduino.INFINITE_LOOP_TRAP.replace(/%1/g,\n            '\\'' + block.id + '\\'') + branch;\n    }\n    var returnValue = Arduino.valueToCode(block, 'RETURN',\n        Arduino.ORDER_NONE) || '';\n    if (returnValue) {\n        returnValue = '  return ' + returnValue + ';\\n';\n    }\n\n    // Get arguments with type\n    var args = [];\n    for (var x = 0; x < block.arguments_.length; x++) {\n        args[x] =\n            'double' +\n            ' ' +\n            Arduino.nameDB_.getName(block.arguments_[x],\n                NameType.VARIABLE);\n    }\n\n    // Get return type\n    var returnType = 'double'\n    returnType = Arduino.getArduinoType_(returnType);\n\n    // Construct code\n    var code = returnType + ' ' + funcName + '(' + args.join(', ') + ') {\\n' +\n        branch + returnValue + '}';\n    code = Arduino.scrub_(block, code);\n    Arduino.definitions_[funcName] = code;\n    return null;\n};\n\n/**\n * Code generator to create a function without a return value.\n * It uses the same code as with return value, as it will maintain the void\n * type.\n * Arduino code: void functionname { }\n */\nArduino['procedures_defnoreturn'] =\n    Arduino['procedures_defreturn'];\n\n/**\n * Code generator to create a function call with a return value.\n * Arduino code: loop { functionname() }\n * @param {!Block} block Block to generate the code from.\n * @return {array} Completed code with order of operation.\n */\nArduino['procedures_callreturn'] = function (block) {\n    var funcName = Arduino.nameDB_.getName(\n        block.getFieldValue('NAME'), NameType.PROCEDURE);\n    var args = [];\n    for (var x = 0; x < block.arguments_.length; x++) {\n        args[x] = Arduino.valueToCode(block, 'ARG' + x,\n            Arduino.ORDER_NONE) || 'null';\n    }\n    var code = funcName + '(' + args.join(', ') + ')';\n    return [code, Arduino.ORDER_UNARY_POSTFIX];\n};\n\n/**\n * Code generator to create a function call without a return value.\n * Arduino code: loop { functionname() }\n * @param {!Block} block Block to generate the code from.\n * @return {string} Completed code.\n */\nArduino['procedures_callnoreturn'] = function (block) {\n    var funcName = Arduino.nameDB_.getName(\n        block.getFieldValue('NAME'), NameType.PROCEDURE);\n    var args = [];\n    for (var x = 0; x < block.arguments_.length; x++) {\n        args[x] = Arduino.valueToCode(block, 'ARG' + x,\n            Arduino.ORDER_NONE) || 'null';\n    }\n    var code = funcName + '(' + args.join(', ') + ');\\n';\n    return code;\n};\n\n/**\n * Code generator to create a conditional (X) return value (Y) for a function.\n * Arduino code: if (X) { return Y; }\n * @param {!Block} block Block to generate the code from.\n * @return {string} Completed code.\n */\nArduino['procedures_ifreturn'] = function (block) {\n    var condition = Arduino.valueToCode(block, 'CONDITION',\n        Arduino.ORDER_NONE) || 'false';\n    var code = 'if (' + condition + ') {\\n';\n    if (block.hasReturnValue_) {\n        var value = Arduino.valueToCode(block, 'VALUE',\n            Arduino.ORDER_NONE) || 'null';\n        code += '  return ' + value + ';\\n';\n    } else {\n        code += '  return;\\n';\n    }\n    code += '}\\n';\n    return code;\n};\n\n/**\n * Code generator to add code into the setup() and loop() functions.\n * Its use is not mandatory, but necessary to add manual code to setup().\n * @param {!Block} block Block to generate the code from.\n * @return {string} Completed code.\n */\nArduino['arduino_functions'] = function (block) {\n    // Edited version of Blockly.Generator.prototype.statementToCode\n    function statementToCodeNoTab(block, name) {\n        var targetBlock = block.getInputTargetBlock(name);\n        var code = Arduino.blockToCode(targetBlock);\n        if (!goog.isString(code)) {\n            throw 'Expecting code from statement block \"' + targetBlock.type + '\".';\n        }\n        return code;\n    }\n\n    var setupBranch = Arduino.statementToCode(block, 'SETUP_FUNC');\n    //var setupCode = Arduino.scrub_(block, setupBranch); No comment block\n    if (setupBranch) {\n        Arduino.addSetup('userSetupCode', setupBranch, true);\n    }\n\n    var loopBranch = statementToCodeNoTab(block, 'LOOP_FUNC');\n    //var loopcode = Arduino.scrub_(block, loopBranch); No comment block\n    return loopBranch;\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Arduino for text blocks.\n */\n'use strict';\n\ngoog.module('Blockly.Arduino.text');\n\nconst { arduinoGenerator: Arduino } = goog.require('Blockly.Arduino');\n\n/**\n* Code generator for a literal String (X).\n* Arduino code: loop { \"X\" }\n* @param {!Block} block Block to generate the code from.\n* @return {array} Completed code with order of operation.\n*/\nArduino['text'] = function (block) {\n    var code = Arduino.quote_(block.getFieldValue('TEXT'));\n    return [code, Arduino.ORDER_ATOMIC];\n};","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Complete helper functions for generating Arduino for\n *     blocks.  This is the entrypoint for Arduino_compressed.js.\n * @suppress {extraRequire}\n */\n 'use strict';\n\n goog.module('Blockly.Arduino.all');\n \n const moduleExports = goog.require('Blockly.Arduino');\n goog.require('Blockly.Arduino.leaphyCommon');\n goog.require('Blockly.Arduino.leaphyOriginal');\n goog.require('Blockly.Arduino.leaphyClick');\n goog.require('Blockly.Arduino.leaphyFlitz');\n goog.require('Blockly.Arduino.leaphyExtra');\n goog.require('Blockly.Arduino.arduino');\n goog.require('Blockly.Arduino.math');\n goog.require('Blockly.Arduino.loops');\n goog.require('Blockly.Arduino.logic');\n goog.require('Blockly.Arduino.variables');\n goog.require('Blockly.Arduino.procedures');\n goog.require('Blockly.Arduino.text');\n\n exports = moduleExports;\n \n "]}